{"remainingRequest":"/Users/yuyalong/myProjects/lianzhiyun/projects/web-projects/platform/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuyalong/myProjects/lianzhiyun/projects/web-projects/platform/src/views/product/pdm/goods/child_info/tab_goodsInfo/SpriceInfoForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuyalong/myProjects/lianzhiyun/projects/web-projects/platform/src/views/product/pdm/goods/child_info/tab_goodsInfo/SpriceInfoForm.vue","mtime":1562741125221},{"path":"/Users/yuyalong/myProjects/lianzhiyun/projects/web-projects/platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuyalong/myProjects/lianzhiyun/projects/web-projects/platform/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuyalong/myProjects/lianzhiyun/projects/web-projects/platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuyalong/myProjects/lianzhiyun/projects/web-projects/platform/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { setTimeout, clearTimeout } from 'timers'\nimport Bus from '@/Bus.js'\n\nexport default {\n  name: 'SpriceInfo',\n  data() {\n    return {\n      timer: null,\n      columns: [],\n      dataSource: [],\n      dataObj: {},\n      spriceData: [],\n      basicSprice: undefined,\n      bomButton: false\n    }\n  },\n  props: {\n    crafts: {\n      type: Array,\n      default: [],\n      required: false\n    },\n    materialsGroup: {\n      type: Array,\n      default: [],\n      required: false\n    },\n    spriceInfoBasic: {\n      type: String,\n      default: '',\n      required: false\n    },\n    spriceInfoData: {\n      type: Array,\n      default: [],\n      required: false\n    },\n    childDisabled: {\n      type: Boolean,\n      default: false,\n      required: false\n    }\n  },\n  mounted() {\n    Bus.$on('bomSub', val => {\n      this.bomButton = val\n      console.log(this.bomButton)\n    })\n  },\n  beforeDestroy() {\n    Bus.$off('bomSub')\n    clearTimeout(this.timer)\n  },\n  methods: {\n    handleChangeInput(value, key, column) {\n      const reg = /^[0-9]*$/\n      if (reg.test(value)) {\n        const newData = [...this.dataSource]\n        const target = newData.filter(item => key === item.key)[0]\n        if (target) {\n          target[column] = value\n          this.dataSource = [...newData]\n          this.setSpriceData()\n          // console.log(this.spriceData)\n          this.$emit('spriceData', this.spriceData)\n        }\n      } else {\n        this.$message.error('请输入数字')\n      }\n    },\n    handleChangeBasic(value) {\n      // console.log(value)\n      const reg = /^[0-9]*$/\n      if (reg.test(value)) {\n        this.basicSprice = value\n        this.$emit('basicSprice', this.basicSprice)\n      } else {\n        this.$message.error('请输入数字')\n      }\n    },\n    // 工艺Tab\n    async craft(val) {\n      this.dataSource = []\n      const newColumns = [...this.columns]\n      val.forEach((item, index) => {\n        newColumns.forEach((cItem, cIndex) => {\n          if (cIndex === 0) {\n            this.dataObj['craft'] = item.inputVal\n          } else {\n            this.dataObj[cItem.dataIndex] = '0'\n          }\n        })\n        this.dataSource[index] = {\n          key: item.key,\n          ...this.dataObj\n        }\n      })\n      this.columns = [...newColumns]\n      // console.log(this.columns)\n      // console.log(this.dataSource)\n    },\n    // Bom Tab\n    async bomColumn(val) {\n      const newDataSource = [...this.dataSource]\n      // console.log(this.dataSource)\n      const firstColumns = [\n        {\n          title: '',\n          dataIndex: 'craft'\n        }\n      ]\n      const otherColumns = val.map((item, index) => {\n        return {\n          title: item.inputVal,\n          dataIndex: `plan${item.key}`,\n          id: item.key,\n          scopedSlots: { customRender: `plan${item.key}` }\n        }\n      })\n      this.columns = [...firstColumns, ...otherColumns]\n      this.dataSource = [...newDataSource]\n      // console.log(this.columns)\n      // console.log(this.dataSource)\n    },\n    // TabInfo\n    async setSpriceData() {\n      this.spriceData = []\n      this.dataSource.forEach(item => {\n        this.columns.slice(1, this.columns.length).forEach(cItem => {\n          this.spriceData.push({\n            craftIndex: item.key,\n            bomIndex: cItem.id,\n            price: item[`plan${cItem.id}`]\n          })\n        })\n      })\n    }\n  },\n  watch: {\n    crafts: {\n      handler(val) {\n        console.log(val)\n        this.craftDataSource = val\n        this.craft(this.craftDataSource).then(() => {\n          this.setSpriceData().then(() => {\n            this.$emit('spriceData', this.spriceData)\n          })\n        })\n      },\n      deep: true,\n      immediate: true\n    },\n    materialsGroup: {\n      handler(val) {\n        // console.log(val)\n        this.bomColumn(val).then(() => {\n          this.craft(this.craftDataSource)\n          this.setSpriceData().then(() => {\n            this.$emit('spriceData', this.spriceData)\n          })\n        })\n      },\n      deep: true,\n      immediate: true\n    },\n    spriceInfoData: {\n      handler(val) {\n        if (val.length) {\n          console.log(val)\n          setTimeout(() => {\n            const newData = [...this.dataSource]\n            console.log(newData)\n            val.forEach((item, index) => {\n              const target = newData.filter(\n                cItem => item.craftIndex === cItem.key\n              )[0]\n              target[`plan${item.bomIndex}`] = item.price + ''\n              this.dataSource = [...newData]\n            })\n            console.log(\n              val.map(item => {\n                return {\n                  craftIndex: item.craftIndex,\n                  bomIndex: item.bomIndex,\n                  price: item.price\n                }\n              })\n            )\n            this.$emit(\n              'spriceData',\n              val.map(item => {\n                return {\n                  craftIndex: item.craftIndex,\n                  bomIndex: item.bomIndex,\n                  price: item.price\n                }\n              })\n            )\n          }, 1500)\n        }\n      },\n      deep: true,\n      immediate: true\n    },\n    spriceInfoBasic: {\n      handler(val) {\n        this.basicSprice = val\n        this.$emit('basicSprice', this.basicSprice)\n      },\n      deep: true,\n      immediate: true\n    }\n  }\n}\n",{"version":3,"sources":["SpriceInfoForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"SpriceInfoForm.vue","sourceRoot":"src/views/product/pdm/goods/child_info/tab_goodsInfo","sourcesContent":["<template>\n  <div class=\"sprice-info\">\n    <a-row :gutter=\"24\">\n      <a-col :span=\"18\">\n        <a-table bordered :dataSource=\"dataSource\" :columns=\"columns\" :pagination=\"false\">\n          <template v-for=\"(value, col) in dataObj\" :slot=\"col\" slot-scope=\"text, record, index\">\n            <div :key=\"col\">\n              <a-input\n                style=\"margin: -5px 5px; width: 80%;\"\n                :disabled=\"(childDisabled === false && bomButton === false) ? true : false\"\n                :value=\"text\"\n                placeholder=\"请输入价格\"\n                @change=\"e => handleChangeInput(e.target.value, record.key, col)\"\n              />\n            </div>\n          </template>\n        </a-table>\n      </a-col>\n      <a-col :span=\"6\">\n        <a-form-item label=\"基础报价\">\n          <a-input\n            :value=\"basicSprice\"\n            :disabled=\"(childDisabled === false && bomButton === false) ? true : false\"\n            @change=\"e => handleChangeBasic(e.target.value)\"\n            placeholder=\"基础报价\"\n          />\n        </a-form-item>\n      </a-col>\n    </a-row>\n  </div>\n</template>\n<script>\nimport { setTimeout, clearTimeout } from 'timers'\nimport Bus from '@/Bus.js'\n\nexport default {\n  name: 'SpriceInfo',\n  data() {\n    return {\n      timer: null,\n      columns: [],\n      dataSource: [],\n      dataObj: {},\n      spriceData: [],\n      basicSprice: undefined,\n      bomButton: false\n    }\n  },\n  props: {\n    crafts: {\n      type: Array,\n      default: [],\n      required: false\n    },\n    materialsGroup: {\n      type: Array,\n      default: [],\n      required: false\n    },\n    spriceInfoBasic: {\n      type: String,\n      default: '',\n      required: false\n    },\n    spriceInfoData: {\n      type: Array,\n      default: [],\n      required: false\n    },\n    childDisabled: {\n      type: Boolean,\n      default: false,\n      required: false\n    }\n  },\n  mounted() {\n    Bus.$on('bomSub', val => {\n      this.bomButton = val\n      console.log(this.bomButton)\n    })\n  },\n  beforeDestroy() {\n    Bus.$off('bomSub')\n    clearTimeout(this.timer)\n  },\n  methods: {\n    handleChangeInput(value, key, column) {\n      const reg = /^[0-9]*$/\n      if (reg.test(value)) {\n        const newData = [...this.dataSource]\n        const target = newData.filter(item => key === item.key)[0]\n        if (target) {\n          target[column] = value\n          this.dataSource = [...newData]\n          this.setSpriceData()\n          // console.log(this.spriceData)\n          this.$emit('spriceData', this.spriceData)\n        }\n      } else {\n        this.$message.error('请输入数字')\n      }\n    },\n    handleChangeBasic(value) {\n      // console.log(value)\n      const reg = /^[0-9]*$/\n      if (reg.test(value)) {\n        this.basicSprice = value\n        this.$emit('basicSprice', this.basicSprice)\n      } else {\n        this.$message.error('请输入数字')\n      }\n    },\n    // 工艺Tab\n    async craft(val) {\n      this.dataSource = []\n      const newColumns = [...this.columns]\n      val.forEach((item, index) => {\n        newColumns.forEach((cItem, cIndex) => {\n          if (cIndex === 0) {\n            this.dataObj['craft'] = item.inputVal\n          } else {\n            this.dataObj[cItem.dataIndex] = '0'\n          }\n        })\n        this.dataSource[index] = {\n          key: item.key,\n          ...this.dataObj\n        }\n      })\n      this.columns = [...newColumns]\n      // console.log(this.columns)\n      // console.log(this.dataSource)\n    },\n    // Bom Tab\n    async bomColumn(val) {\n      const newDataSource = [...this.dataSource]\n      // console.log(this.dataSource)\n      const firstColumns = [\n        {\n          title: '',\n          dataIndex: 'craft'\n        }\n      ]\n      const otherColumns = val.map((item, index) => {\n        return {\n          title: item.inputVal,\n          dataIndex: `plan${item.key}`,\n          id: item.key,\n          scopedSlots: { customRender: `plan${item.key}` }\n        }\n      })\n      this.columns = [...firstColumns, ...otherColumns]\n      this.dataSource = [...newDataSource]\n      // console.log(this.columns)\n      // console.log(this.dataSource)\n    },\n    // TabInfo\n    async setSpriceData() {\n      this.spriceData = []\n      this.dataSource.forEach(item => {\n        this.columns.slice(1, this.columns.length).forEach(cItem => {\n          this.spriceData.push({\n            craftIndex: item.key,\n            bomIndex: cItem.id,\n            price: item[`plan${cItem.id}`]\n          })\n        })\n      })\n    }\n  },\n  watch: {\n    crafts: {\n      handler(val) {\n        console.log(val)\n        this.craftDataSource = val\n        this.craft(this.craftDataSource).then(() => {\n          this.setSpriceData().then(() => {\n            this.$emit('spriceData', this.spriceData)\n          })\n        })\n      },\n      deep: true,\n      immediate: true\n    },\n    materialsGroup: {\n      handler(val) {\n        // console.log(val)\n        this.bomColumn(val).then(() => {\n          this.craft(this.craftDataSource)\n          this.setSpriceData().then(() => {\n            this.$emit('spriceData', this.spriceData)\n          })\n        })\n      },\n      deep: true,\n      immediate: true\n    },\n    spriceInfoData: {\n      handler(val) {\n        if (val.length) {\n          console.log(val)\n          setTimeout(() => {\n            const newData = [...this.dataSource]\n            console.log(newData)\n            val.forEach((item, index) => {\n              const target = newData.filter(\n                cItem => item.craftIndex === cItem.key\n              )[0]\n              target[`plan${item.bomIndex}`] = item.price + ''\n              this.dataSource = [...newData]\n            })\n            console.log(\n              val.map(item => {\n                return {\n                  craftIndex: item.craftIndex,\n                  bomIndex: item.bomIndex,\n                  price: item.price\n                }\n              })\n            )\n            this.$emit(\n              'spriceData',\n              val.map(item => {\n                return {\n                  craftIndex: item.craftIndex,\n                  bomIndex: item.bomIndex,\n                  price: item.price\n                }\n              })\n            )\n          }, 1500)\n        }\n      },\n      deep: true,\n      immediate: true\n    },\n    spriceInfoBasic: {\n      handler(val) {\n        this.basicSprice = val\n        this.$emit('basicSprice', this.basicSprice)\n      },\n      deep: true,\n      immediate: true\n    }\n  }\n}\n</script>\n<style lang=\"less\" scoped>\n.sprice-info {\n  margin-bottom: 30px;\n}\n</style>\n"]}]}