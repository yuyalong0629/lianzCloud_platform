{"remainingRequest":"/Users/yuyalong/myProjects/lianzhiyun/projects/web-project/platform/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuyalong/myProjects/lianzhiyun/projects/web-project/platform/src/views/product/pdm/goods/EditorBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuyalong/myProjects/lianzhiyun/projects/web-project/platform/src/views/product/pdm/goods/EditorBar.vue","mtime":1556537836058},{"path":"/Users/yuyalong/myProjects/lianzhiyun/projects/web-project/platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuyalong/myProjects/lianzhiyun/projects/web-project/platform/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuyalong/myProjects/lianzhiyun/projects/web-project/platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuyalong/myProjects/lianzhiyun/projects/web-project/platform/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport E from 'wangeditor'\nexport default {\n  name: 'Editorbar',\n  data() {\n    return {\n      editor: null,\n      info_: null\n    }\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  },\n  props: {\n    value: {\n      type: String,\n      default: ''\n    },\n    isClear: {\n      type: Boolean,\n      default: false\n    },\n    editorValue: {\n      type: String,\n      default: ''\n    }\n  },\n  watch: {\n    isClear(val) {\n      // 触发清除文本域内容\n      if (val) {\n        this.editor.txt.clear()\n        this.info_ = null\n      }\n    },\n    editorValue(val) {\n      this.editor.txt.html(this.editorValue)\n    }\n  },\n  mounted() {\n    this.seteditor()\n    this.editor.txt.html(this.value)\n  },\n  methods: {\n    seteditor() {\n      this.editor = new E(this.$refs.toolbar, this.$refs.editor)\n\n      this.editor.customConfig.uploadImgShowBase64 = true // base 64 存储图片\n      this.editor.customConfig.uploadImgServer = '/api/ic/user/file/uploadFile' // 配置服务器端地址\n      this.editor.customConfig.uploadImgHeaders = {\n        'AUTH-TOKEN': localStorage.getItem('ACCESS_TOKEN'),\n        companyId: localStorage.getItem('companyId')\n      } // 自定义 header\n      this.editor.customConfig.uploadFileName = 'file' // 后端接受上传文件的参数名\n      this.editor.customConfig.uploadImgMaxSize = 2 * 1024 * 1024 // 将图片大小限制为 2M\n      this.editor.customConfig.uploadImgMaxLength = 10 // 限制一次最多上传 3 张图片\n      this.editor.customConfig.uploadImgTimeout = 3 * 60 * 1000 // 设置超时时间\n      this.editor.customConfig.zIndex = 0 // 设置z-index\n\n      // 配置菜单\n      this.editor.customConfig.menus = [\n        'head', // 标题\n        'bold', // 粗体\n        'fontSize', // 字号\n        'fontName', // 字体\n        'italic', // 斜体\n        'underline', // 下划线\n        'strikeThrough', // 删除线\n        'foreColor', // 文字颜色\n        'backColor', // 背景颜色\n        'link', // 插入链接\n        'list', // 列表\n        'justify', // 对齐方式\n        'quote', // 引用\n        'emoticon', // 表情\n        'image', // 插入图片\n        'table', // 表格\n        // 'video', // 插入视频\n        'code', // 插入代码\n        'undo', // 撤销\n        'redo' // 重复\n      ]\n      // 隐藏“网络图片”tab\n      this.editor.customConfig.showLinkImg = false\n      this.editor.customConfig.linkImgCallback = function(url) {\n        // console.log(url) // url 即插入图片的地址\n      }\n      this.editor.customConfig.uploadImgParams = {\n        // 如果版本 <=v3.1.0 ，属性值会自动进行 encode ，此处无需 encode\n        // 如果版本 >=v3.1.1 ，属性值不会自动 encode ，如有需要自己手动 encode\n        bizType: 'GOODS'\n      }\n      this.editor.customConfig.uploadImgHooks = {\n        fail: (xhr, editor, result) => {\n          // 插入图片失败回调\n        },\n        success: (xhr, editor, result) => {\n          // 图片上传成功回调\n        },\n        timeout: (xhr, editor) => {\n          // 网络超时的回调\n        },\n        error: (xhr, editor) => {\n          // 图片上传错误的回调\n        },\n        customInsert: (insertImg, result, editor) => {\n          // 图片上传成功,插入图片的回调\n          console.log(result.data)\n          const url = result.data\n          insertImg(url)\n        }\n      }\n      this.editor.customConfig.onchange = html => {\n        this.info_ = html // 绑定当前逐渐地值\n        this.$emit('change', this.info_) // 将内容同步到父组件中\n      }\n\n      // 创建富文本编辑器\n      this.editor.create()\n    }\n  }\n}\n",{"version":3,"sources":["EditorBar.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"EditorBar.vue","sourceRoot":"src/views/product/pdm/goods","sourcesContent":["<template lang=\"html\">\n  <div class=\"editor\">\n    <div ref=\"toolbar\" class=\"toolbar\">\n    </div>\n    <div ref=\"editor\" class=\"text\">\n    </div>\n  </div>\n</template>\n\n<script>\nimport E from 'wangeditor'\nexport default {\n  name: 'Editorbar',\n  data() {\n    return {\n      editor: null,\n      info_: null\n    }\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  },\n  props: {\n    value: {\n      type: String,\n      default: ''\n    },\n    isClear: {\n      type: Boolean,\n      default: false\n    },\n    editorValue: {\n      type: String,\n      default: ''\n    }\n  },\n  watch: {\n    isClear(val) {\n      // 触发清除文本域内容\n      if (val) {\n        this.editor.txt.clear()\n        this.info_ = null\n      }\n    },\n    editorValue(val) {\n      this.editor.txt.html(this.editorValue)\n    }\n  },\n  mounted() {\n    this.seteditor()\n    this.editor.txt.html(this.value)\n  },\n  methods: {\n    seteditor() {\n      this.editor = new E(this.$refs.toolbar, this.$refs.editor)\n\n      this.editor.customConfig.uploadImgShowBase64 = true // base 64 存储图片\n      this.editor.customConfig.uploadImgServer = '/api/ic/user/file/uploadFile' // 配置服务器端地址\n      this.editor.customConfig.uploadImgHeaders = {\n        'AUTH-TOKEN': localStorage.getItem('ACCESS_TOKEN'),\n        companyId: localStorage.getItem('companyId')\n      } // 自定义 header\n      this.editor.customConfig.uploadFileName = 'file' // 后端接受上传文件的参数名\n      this.editor.customConfig.uploadImgMaxSize = 2 * 1024 * 1024 // 将图片大小限制为 2M\n      this.editor.customConfig.uploadImgMaxLength = 10 // 限制一次最多上传 3 张图片\n      this.editor.customConfig.uploadImgTimeout = 3 * 60 * 1000 // 设置超时时间\n      this.editor.customConfig.zIndex = 0 // 设置z-index\n\n      // 配置菜单\n      this.editor.customConfig.menus = [\n        'head', // 标题\n        'bold', // 粗体\n        'fontSize', // 字号\n        'fontName', // 字体\n        'italic', // 斜体\n        'underline', // 下划线\n        'strikeThrough', // 删除线\n        'foreColor', // 文字颜色\n        'backColor', // 背景颜色\n        'link', // 插入链接\n        'list', // 列表\n        'justify', // 对齐方式\n        'quote', // 引用\n        'emoticon', // 表情\n        'image', // 插入图片\n        'table', // 表格\n        // 'video', // 插入视频\n        'code', // 插入代码\n        'undo', // 撤销\n        'redo' // 重复\n      ]\n      // 隐藏“网络图片”tab\n      this.editor.customConfig.showLinkImg = false\n      this.editor.customConfig.linkImgCallback = function(url) {\n        // console.log(url) // url 即插入图片的地址\n      }\n      this.editor.customConfig.uploadImgParams = {\n        // 如果版本 <=v3.1.0 ，属性值会自动进行 encode ，此处无需 encode\n        // 如果版本 >=v3.1.1 ，属性值不会自动 encode ，如有需要自己手动 encode\n        bizType: 'GOODS'\n      }\n      this.editor.customConfig.uploadImgHooks = {\n        fail: (xhr, editor, result) => {\n          // 插入图片失败回调\n        },\n        success: (xhr, editor, result) => {\n          // 图片上传成功回调\n        },\n        timeout: (xhr, editor) => {\n          // 网络超时的回调\n        },\n        error: (xhr, editor) => {\n          // 图片上传错误的回调\n        },\n        customInsert: (insertImg, result, editor) => {\n          // 图片上传成功,插入图片的回调\n          console.log(result.data)\n          const url = result.data\n          insertImg(url)\n        }\n      }\n      this.editor.customConfig.onchange = html => {\n        this.info_ = html // 绑定当前逐渐地值\n        this.$emit('change', this.info_) // 将内容同步到父组件中\n      }\n\n      // 创建富文本编辑器\n      this.editor.create()\n    }\n  }\n}\n</script>\n\n<style lang=\"css\">\n.editor {\n  width: 80%;\n  margin: 0 auto;\n}\n.toolbar {\n  border: 1px solid #ccc;\n}\n.text {\n  border: 1px solid #ccc;\n  min-height: 200px;\n}\n</style>\n"]}]}