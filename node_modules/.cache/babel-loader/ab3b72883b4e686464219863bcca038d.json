{"remainingRequest":"/Users/yuyalong/myProjects/lianzhiyun/projects/web-project/platform/node_modules/babel-loader/lib/index.js!/Users/yuyalong/myProjects/lianzhiyun/projects/web-project/platform/node_modules/eslint-loader/index.js??ref--13-0!/Users/yuyalong/myProjects/lianzhiyun/projects/web-project/platform/src/api/axios.js","dependencies":[{"path":"/Users/yuyalong/myProjects/lianzhiyun/projects/web-project/platform/src/api/axios.js","mtime":1556540779059},{"path":"/Users/yuyalong/myProjects/lianzhiyun/projects/web-project/platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yuyalong/myProjects/lianzhiyun/projects/web-project/platform/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yuyalong/myProjects/lianzhiyun/projects/web-project/platform/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _JSON$stringify from \"/Users/yuyalong/myProjects/lianzhiyun/projects/web-project/platform/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _Promise from \"/Users/yuyalong/myProjects/lianzhiyun/projects/web-project/platform/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport axios from 'axios';\nimport qs from 'qs';\nimport notification from 'ant-design-vue/es/notification';\nimport router from '@/router'; // 统一配置\n// axios.defaults.baseURL = 'http://192.168.1.109:9001'\n// axios.defaults.timeout = 10000\n// axios.defaults.headers.post['Content-Type'] = 'Content-Type: application/x-www-form-urlencoded'\n// 请求拦截器\n\naxios.interceptors.request.use(function (config) {\n  // 每次发送请求之前判断vuex中是否存在token\n  // 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况\n  // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\n  var token = localStorage.getItem('ACCESS_TOKEN');\n  var companyId = localStorage.getItem('companyId');\n\n  if (token) {\n    config.headers['AUTH-TOKEN'] = token;\n  }\n\n  if (companyId) {\n    config.headers['companyId'] = companyId;\n  }\n\n  return config;\n}, function (error) {\n  return _Promise.error(error);\n}); // http response 拦截器\n\naxios.interceptors.response.use(function (response) {\n  if (response.data.code === 102) {\n    notification.error({\n      message: response.data.msg\n    });\n  }\n\n  return response;\n}, function (error) {\n  if (error.response) {\n    var data = error.response.data;\n    var token = localStorage.getItem('ACCESS_TOKEN');\n\n    if (data.code === 101) {\n      notification.error({\n        message: data.msg\n      });\n      localStorage.clear();\n      router.replace('/login');\n      return;\n    }\n\n    if (data.code === 102) {\n      notification.error({\n        message: data.msg\n      });\n      return;\n    }\n\n    if (error.response.status === 403) {\n      notification.error({\n        message: '登录超时',\n        description: data.msg\n      });\n      router.replace('/403'); // return\n    }\n\n    if (error.response.status === 404) {\n      notification.error({\n        message: '客户端错误',\n        description: data.msg\n      });\n      router.replace('/403'); // return\n    }\n\n    if (error.response.status === 500) {\n      notification.error({\n        message: '请求超时',\n        description: '请返回重新登录'\n      });\n\n      if (token) {\n        // localStorage.removeItem('ACCESS_TOKEN')\n        setTimeout(function () {\n          router.replace('/500');\n        }, 500);\n      }\n\n      return;\n    }\n  }\n\n  return _Promise.reject(error);\n});\n/**\n * get方法，对应get请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\n\nexport function get(url, parameter) {\n  return axios({\n    url: url,\n    method: 'get',\n    params: parameter,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  });\n}\n/**\n * post方法，对应post请求 form-data\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\n\nexport function post(url, parameter) {\n  return axios({\n    url: url,\n    method: 'post',\n    data: qs.stringify(parameter),\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  });\n}\n/**\n * delete方法，对应post请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\n\nexport function deleted(url, parameter) {\n  return axios({\n    url: url,\n    method: 'delete',\n    data: parameter,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  });\n}\n/**\n * post方法\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\n\nexport function postJson(url, parameter) {\n  return axios({\n    url: url,\n    method: 'post',\n    data: _JSON$stringify(parameter),\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8 '\n    }\n  });\n}\n/**\n * @description: put方法\n * @param {String} url [请求url地址]\n * @param {Object} parameter [请求时携带的参数]\n * @return: put\n */\n\nexport function put(url, parameter) {\n  return axios({\n    url: url,\n    method: 'put',\n    data: _JSON$stringify(parameter),\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8 '\n    }\n  });\n}\n/**\n * @description: POST\n * @param {String} url [请求url地址]\n * @param {Object} parameter [请求时携带的参数]\n * @return: uploadPost\n */\n\nexport function uploadPost(url, parameter) {\n  return axios({\n    url: url,\n    method: 'post',\n    data: parameter,\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n}",{"version":3,"sources":["/Users/yuyalong/myProjects/lianzhiyun/projects/web-project/platform/src/api/axios.js"],"names":["axios","qs","notification","router","interceptors","request","use","config","token","localStorage","getItem","companyId","headers","error","response","data","code","message","msg","clear","replace","status","description","setTimeout","reject","get","url","parameter","method","params","post","stringify","deleted","postJson","put","uploadPost"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport qs from 'qs'\nimport notification from 'ant-design-vue/es/notification'\nimport router from '@/router'\n\n// 统一配置\n// axios.defaults.baseURL = 'http://192.168.1.109:9001'\n// axios.defaults.timeout = 10000\n// axios.defaults.headers.post['Content-Type'] = 'Content-Type: application/x-www-form-urlencoded'\n\n// 请求拦截器\naxios.interceptors.request.use(\n  config => {\n    // 每次发送请求之前判断vuex中是否存在token\n    // 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况\n    // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\n    const token = localStorage.getItem('ACCESS_TOKEN')\n    const companyId = localStorage.getItem('companyId')\n    if (token) {\n      config.headers['AUTH-TOKEN'] = token\n    }\n    if (companyId) {\n      config.headers['companyId'] = companyId\n    }\n    return config\n  },\n  error => {\n    return Promise.error(error)\n  })\n\n// http response 拦截器\naxios.interceptors.response.use(\n  response => {\n    if (response.data.code === 102) {\n      notification.error({\n        message: response.data.msg\n      })\n    }\n    return response\n  },\n  error => {\n    if (error.response) {\n      const data = error.response.data\n      const token = localStorage.getItem('ACCESS_TOKEN')\n      if (data.code === 101) {\n        notification.error({\n          message: data.msg\n        })\n        localStorage.clear()\n        router.replace('/login')\n        return\n      }\n      if (data.code === 102) {\n        notification.error({\n          message: data.msg\n        })\n        return\n      }\n      if (error.response.status === 403) {\n        notification.error({\n          message: '登录超时',\n          description: data.msg\n        })\n        router.replace('/403')\n        // return\n      }\n      if (error.response.status === 404) {\n        notification.error({\n          message: '客户端错误',\n          description: data.msg\n        })\n        router.replace('/403')\n        // return\n      }\n      if (error.response.status === 500) {\n        notification.error({\n          message: '请求超时',\n          description: '请返回重新登录'\n        })\n        if (token) {\n          // localStorage.removeItem('ACCESS_TOKEN')\n          setTimeout(() => {\n            router.replace('/500')\n          }, 500)\n        }\n        return\n      }\n    }\n    return Promise.reject(error)\n  }\n)\n\n/**\n * get方法，对应get请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\nexport function get(url, parameter) {\n  return axios({\n    url: url,\n    method: 'get',\n    params: parameter,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  })\n}\n\n/**\n * post方法，对应post请求 form-data\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\n\nexport function post(url, parameter) {\n  return axios({\n    url: url,\n    method: 'post',\n    data: qs.stringify(parameter),\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  })\n}\n\n/**\n * delete方法，对应post请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\n\nexport function deleted(url, parameter) {\n  return axios({\n    url: url,\n    method: 'delete',\n    data: parameter,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  })\n}\n\n/**\n * post方法\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\n\nexport function postJson(url, parameter) {\n  return axios({\n    url: url,\n    method: 'post',\n    data: JSON.stringify(parameter),\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8 '\n    }\n  })\n}\n\n/**\n * @description: put方法\n * @param {String} url [请求url地址]\n * @param {Object} parameter [请求时携带的参数]\n * @return: put\n */\n\nexport function put(url, parameter) {\n  return axios({\n    url: url,\n    method: 'put',\n    data: JSON.stringify(parameter),\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8 '\n    }\n  })\n}\n\n/**\n * @description: POST\n * @param {String} url [请求url地址]\n * @param {Object} parameter [请求时携带的参数]\n * @return: uploadPost\n */\nexport function uploadPost(url, parameter) {\n  return axios({\n    url: url,\n    method: 'post',\n    data: parameter,\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  })\n}\n"]}]}